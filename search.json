[{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to mwbenchr","title":"Contributing to mwbenchr","text":"’re excited contribute mwbenchr! document outlines can get involved contribute project. detailed guidance contributing mwbenchr tidyverse packages, check development contributing guide code review principles.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"bug-reports","dir":"","previous_headings":"Ways you can contribute","what":"Bug Reports","title":"Contributing to mwbenchr","text":"’ve encountered bug, please let us know opening issue. Provide minimal reproducible example, can quickly see issue. Mention R version, package version, operating system. possible, include full error message traceback.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"feature-requests","dir":"","previous_headings":"Ways you can contribute","what":"Feature Requests","title":"Contributing to mwbenchr","text":"Want see new feature? Open issue let’s discuss . sure explain feature used ’s important. Think whether fits within scope package suggesting.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"Ways you can contribute","what":"Code Contributions","title":"Contributing to mwbenchr","text":"Fork repository create new branch changes. Follow coding style guidelines ’ve set . Add tests new functionality create. Update documentation necessary. Open pull request clear description changes ’ve made.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"setting-up-your-development-environment","dir":"","previous_headings":"","what":"Setting up your development environment","title":"Contributing to mwbenchr","text":"Fork repo clone local machine: Install necessary development dependencies: Load package run tests:","code":"git clone https://github.com/danymukesha/mwbenchr.git cd mwbenchr # 1st, install devtools if you haven't already install.packages(\"devtools\")  # 2nd, install the package dependencies devtools::install_deps(dependencies = TRUE)  # 3rd, install additional development tools like testthat and BiocCheck install.packages(c(\"testthat\", \"covr\", \"BiocCheck\")) # load the package for development purposes devtools::load_all()  # run the tests devtools::test()  # Check the package devtools::check()"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"r-code-style","dir":"","previous_headings":"Coding Guidelines","what":"R Code Style","title":"Contributing to mwbenchr","text":"follow Bioconductor coding style. Use snake_case function names variable names. Keep line lengths 80 characters readability. Use clear, meaningful names functions variables. Add type checks function parameters appropriate.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"Coding Guidelines","what":"Documentation","title":"Contributing to mwbenchr","text":"use roxygen2 documentation, sure include @param, @return, @examples functions. Include working examples @examples section (use \\dontrun{} API calls). Update vignettes ’re adding significant new features.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"testing","dir":"","previous_headings":"Coding Guidelines","what":"Testing","title":"Contributing to mwbenchr","text":"Write tests new functions using testthat. aim 80% code coverage, write tests success error cases. code makes API calls, use mocking tests. Tests go tests/testthat/ folder.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"version-control","dir":"","previous_headings":"Coding Guidelines","what":"Version Control","title":"Contributing to mwbenchr","text":"working new feature, create branch main: git checkout -b feature/new-feature. Write clear, descriptive commit messages. Keep commits focused small possible. Reference relevant issues commit messages.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull Request Process","title":"Contributing to mwbenchr","text":"submitting pull request, please make sure: ’ve done necessary checks: Run devtools::check() fix warnings errors. Run BiocCheck::BiocCheck() catch Bioconductor-specific issues. Make sure tests pass running devtools::test(). Update NEWS.md ’ve added features fixed bugs. Don’t forget update documentation necessary. submitting pull request: Provide clear description ’s changed. Link relevant issues. Include tests new functionality. Ensure code properly covered tests. Make sure continuous integration checks pass. Review process: Maintainers review PR may ask changes. PR approved, merged.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"unit-tests","dir":"","previous_headings":"Testing Guidelines","what":"Unit Tests","title":"Contributing to mwbenchr","text":"’s basic structure testing function:","code":"test_that(\"function validates input correctly\", {   expect_error(my_function(\"invalid_input\"), \"helpful error message\")   expect_equal(my_function(\"valid_input\"), expected_result) })"},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"mocking-api-calls","dir":"","previous_headings":"Testing Guidelines","what":"Mocking API Calls","title":"Contributing to mwbenchr","text":"function makes API calls, ’s can mock tests:","code":"test_that(\"API function constructs correct endpoint\", {   mock_request <- function(client, endpoint, ...) {     list(endpoint = endpoint)   }      with_mocked_bindings(     mw_request = mock_request,     {       result <- my_api_function(client, \"param\")       expect_match(result$endpoint, \"expected/endpoint/param\")     }   ) })"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"function-documentation-template","dir":"","previous_headings":"Documentation Guidelines","what":"Function Documentation Template","title":"Contributing to mwbenchr","text":"Use format documenting functions:","code":"#' Brief description of what the function does #' #' A more detailed explanation of how the function works, when to use it, #' and any important considerations. #' #' @param param1 Description of the first parameter #' @param param2 Description of the second parameter #' #' @return What this function returns #' #' @examples #' \\dontrun{ #' # Example of how to use the function #' result <- my_function(\"example\") #' print(result) #' } #' #' @export"},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"vignette-updates","dir":"","previous_headings":"Documentation Guidelines","what":"Vignette Updates","title":"Contributing to mwbenchr","text":"Add new sections vignette ’ve introduced significant features. Make sure examples vignette working code expected output. Update existing examples impacted API changes. Ensure vignette compiles without errors.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"version-numbers","dir":"","previous_headings":"Release Process","what":"Version Numbers","title":"Contributing to mwbenchr","text":"follow Semantic Versioning, sure update version number DESCRIPTION file accordingly. Keep track changes NEWS.md.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/CONTRIBUTING.html","id":"bioconductor-requirements","dir":"","previous_headings":"Release Process","what":"Bioconductor Requirements","title":"Contributing to mwbenchr","text":"Ensure package passes R CMD check ---cran. Address warnings errors reported BiocCheck.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 mwbenchr Dany Mukesha Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"overview","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation","what":"Overview","title":"API Schema Documentation","text":"document provides complete schema mwbenchr functions, parameters, return types, underlying REST API endpoints access.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"function-categories","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation","what":"Function Categories","title":"API Schema Documentation","text":"","code":"mwbenchr ├── Client Management │   ├── mw_rest_client() │   └── print.mw_rest_client() ├── Study Functions │   ├── get_study_summary() │   ├── get_study_factors() │   ├── get_study_metabolites() │   └── get_study_data() ├── Compound Functions │   ├── get_compound_by_regno() │   ├── get_compound_by_pubchem_cid() │   ├── get_compound_classification() │   └── download_compound_structure() ├── RefMet Functions │   ├── get_refmet_by_name() │   ├── standardize_to_refmet() │   └── get_all_refmet_names() ├── Search Functions │   ├── search_metstat() │   └── search_by_mass() ├── Mass Spectrometry │   └── calculate_exact_mass() └── Utilities     ├── response_to_df()     ├── flatten_entry()     └── list_endpoints()"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"mw_rest_client","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 1. Client Management","what":"mw_rest_client()","title":"API Schema Documentation","text":"Purpose: Initialize REST client API interactions Parameters: Returns: S3 object class \"mw_rest_client\" REST Endpoint: N/(local object creation)","code":"mw_rest_client(   base_url = \"https://www.metabolomicsworkbench.org/rest\",  # Character   cache = FALSE,                                            # Logical   cache_dir = tempdir(),                                   # Character   timeout = 30                                             # Numeric ) Structure: ├── base_url    : Character - API base URL ├── cache       : Logical - Caching enabled? ├── cache_dir   : Character - Cache directory path └── timeout     : Numeric - Request timeout (seconds)"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"get_study_summary","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 2. Study Functions","what":"get_study_summary()","title":"API Schema Documentation","text":"Purpose: Retrieve study metadata summary information Parameters: REST Endpoint: GET /study/study_id/{study_id}/summary[/{format}] Returns: - JSON format: Tibble columns: TXT format: Character string","code":"get_study_summary(   client,                    # mw_rest_client object   study_id = \"ST\",          # Character - Study ID or \"ST\" for all   format = \"json\"           # Character - \"json\" or \"txt\" ) ├── study_id          : Character ├── study_title       : Character   ├── study_type        : Character ├── institute         : Character ├── department        : Character ├── last_name         : Character ├── first_name        : Character ├── email             : Character ├── phone             : Character ├── submit_date       : Character (YYYY-MM-DD) ├── study_summary     : Character └── [additional metadata columns]"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"get_study_factors","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 2. Study Functions","what":"get_study_factors()","title":"API Schema Documentation","text":"Purpose: Get experimental design factors (sample metadata) Parameters: REST Endpoint: GET /study/study_id/{study_id}/factors Returns: Tibble experimental factors","code":"get_study_factors(   client,         # mw_rest_client object   study_id        # Character - Study ID ) ├── local_sample_id   : Character ├── sample_id         : Character ├── subject_id        : Character ├── factor_name       : Character ├── factor_value      : Character └── [study-specific factor columns]"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"get_study_metabolites","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 2. Study Functions","what":"get_study_metabolites()","title":"API Schema Documentation","text":"Purpose: Get list metabolites measured study Parameters: REST Endpoint: GET /study/study_id/{study_id}/metabolites Returns: Tibble metabolite information","code":"get_study_metabolites(   client,         # mw_rest_client object   study_id        # Character - Study ID ) ├── metabolite_id     : Character ├── metabolite_name   : Character ├── refmet_name       : Character ├── pubchem_cid       : Character ├── kegg_id           : Character ├── other_id          : Character ├── other_id_type     : Character └── ri                : Numeric (retention index)"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"get_study_data","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 2. Study Functions","what":"get_study_data()","title":"API Schema Documentation","text":"Purpose: Get complete data matrix study Parameters: REST Endpoint: GET /study/study_id/{study_id}/data Returns: Tibble metabolite data across samples","code":"get_study_data(   client,         # mw_rest_client object   study_id        # Character - Study ID ) ├── study_id          : Character ├── analysis_id       : Character ├── analysis_summary  : Character ├── metabolite_name   : Character ├── metabolite_id     : Character ├── refmet_name       : Character ├── units             : Character └── [sample columns]  : Numeric - One column per sample"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"get_compound_by_regno","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 3. Compound Functions","what":"get_compound_by_regno()","title":"API Schema Documentation","text":"Purpose: Retrieve compound information registry number Parameters: REST Endpoint: GET /compound/regno/{regno}/{fields}[/{format}] Available Fields: “”, “name”, “systematic_name”, “formula”, “pubchem_cid”, “inchi_key”, “smiles” Returns: Tibble compound information","code":"get_compound_by_regno(   client,                    # mw_rest_client object   regno,                     # Character/Numeric - Registry number   fields = \"all\",           # Character - Fields to return   format = \"json\"           # Character - \"json\" or \"txt\" ) ├── regno             : Character ├── name              : Character ├── systematic_name   : Character ├── formula           : Character ├── pubchem_cid       : Character ├── inchi_key         : Character ├── smiles            : Character ├── iso_smiles        : Character └── [additional fields depending on 'fields' parameter]"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"get_compound_by_pubchem_cid","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 3. Compound Functions","what":"get_compound_by_pubchem_cid()","title":"API Schema Documentation","text":"Purpose: Retrieve compound information PubChem CID Parameters: REST Endpoint: GET /compound/pubchem_cid/{cid}/{fields}[/{format}] Returns: structure get_compound_by_regno()","code":"get_compound_by_pubchem_cid(   client,                    # mw_rest_client object   cid,                       # Character/Numeric - PubChem CID   fields = \"all\",           # Character - Fields to return   format = \"json\"           # Character - \"json\" or \"txt\" )"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"get_compound_classification","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 3. Compound Functions","what":"get_compound_classification()","title":"API Schema Documentation","text":"Purpose: Get taxonomic classification hierarchy compound Parameters: REST Endpoint: GET /compound/{id_type}/{id_value}/classification Returns: Tibble classification hierarchy","code":"get_compound_classification(   client,         # mw_rest_client object   id_type,        # Character - \"regno\", \"pubchem_cid\", etc.   id_value        # Character/Numeric - Identifier value ) ├── kingdom           : Character ├── super_class       : Character ├── class            : Character ├── sub_class        : Character ├── direct_parent    : Character └── molecular_framework : Character"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"download_compound_structure","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 3. Compound Functions","what":"download_compound_structure()","title":"API Schema Documentation","text":"Purpose: Download molecular structure files Parameters: REST Endpoint: GET /compound/{id_type}/{id_value}/{format} Returns: Character string containing structure file content","code":"download_compound_structure(   client,                    # mw_rest_client object   id_type,                   # Character - Identifier type   id_value,                  # Character/Numeric - Identifier value   format = \"molfile\"        # Character - \"molfile\" or \"sdf\" )"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"get_refmet_by_name","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 4. RefMet Functions","what":"get_refmet_by_name()","title":"API Schema Documentation","text":"Purpose: Get RefMet information metabolite Parameters: REST Endpoint: GET /refmet/name/{name}/{fields} Available Fields: “”, “name”, “formula”, “exactmass”, “pubchem_cid”, “inchi_key”, “smiles” Returns: Tibble RefMet information","code":"get_refmet_by_name(   client,                    # mw_rest_client object   name,                      # Character - RefMet name   fields = \"all\"            # Character - Fields to return ) ├── refmet_name       : Character ├── formula           : Character ├── exactmass         : Numeric ├── pubchem_cid       : Character ├── inchi_key         : Character ├── smiles            : Character ├── super_class       : Character ├── main_class        : Character └── sub_class         : Character"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"standardize_to_refmet","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 4. RefMet Functions","what":"standardize_to_refmet()","title":"API Schema Documentation","text":"Purpose: Convert metabolite name RefMet standard Parameters: REST Endpoint: GET /refmet/match/{name}/name Returns: Tibble standardization result","code":"standardize_to_refmet(   client,         # mw_rest_client object   name            # Character - Metabolite name to standardize ) ├── input_name        : Character ├── refmet_name       : Character ├── formula           : Character ├── exactmass         : Numeric └── pubchem_cid       : Character"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"get_all_refmet_names","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 4. RefMet Functions","what":"get_all_refmet_names()","title":"API Schema Documentation","text":"Purpose: Retrieve RefMet standardized names Parameters: REST Endpoint: GET /refmet/name Returns: Tibble RefMet names","code":"get_all_refmet_names(   client          # mw_rest_client object ) ├── refmet_name       : Character ├── pubchem_cid       : Character ├── exactmass         : Numeric └── formula           : Character"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"search_metstat","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 5. Search Functions","what":"search_metstat()","title":"API Schema Documentation","text":"Purpose: Search studies using multiple criteria Parameters: REST Endpoint: GET /metstat/{analysis_type};{polarity};{chromatography};{species};{sample_source};{disease};{kegg_id};{refmet_name} Returns: Tibble matching studies","code":"search_metstat(   client,                    # mw_rest_client object   analysis_type = \"\",        # Character - \"LCMS\", \"GCMS\", \"NMR\", etc.   polarity = \"\",            # Character - \"POSITIVE\", \"NEGATIVE\"   chromatography = \"\",      # Character - \"HILIC\", \"RP\", etc.   species = \"\",             # Character - \"Human\", \"Mouse\", \"Rat\", etc.   sample_source = \"\",       # Character - \"Blood\", \"Urine\", \"Tissue\", etc.   disease = \"\",             # Character - Disease/condition   kegg_id = \"\",             # Character - KEGG compound ID   refmet_name = \"\"          # Character - RefMet metabolite name ) ├── study_id          : Character ├── analysis_id       : Character ├── metabolite_name   : Character ├── refmet_name       : Character ├── analysis_type     : Character ├── ms_type           : Character ├── ionization        : Character ├── chromatography_type : Character ├── species           : Character ├── sample_source     : Character └── [additional study metadata]"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"search_by_mass","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 5. Search Functions","what":"search_by_mass()","title":"API Schema Documentation","text":"Purpose: Search compounds accurate mass Parameters: REST Endpoint: GET /moverz/{db}/{mz}/{ion_type}/{tolerance}[/{format}] Returns: Tibble matching compounds","code":"search_by_mass(   client,                    # mw_rest_client object   db,                        # Character - \"MB\", \"LIPIDS\", \"REFMET\"   mz,                        # Numeric - Mass-to-charge ratio   ion_type,                  # Character - \"M+H\", \"M-H\", \"M+Na\", etc.   tolerance,                 # Numeric - Mass tolerance (Daltons)   format = \"json\"           # Character - \"json\" or \"txt\" ) ├── refmet_name       : Character ├── formula           : Character ├── exactmass         : Numeric ├── regno             : Character ├── pubchem_cid       : Character ├── kegg_id           : Character ├── mass_difference   : Numeric └── lipid_category    : Character (for LIPIDS db)"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"calculate_exact_mass","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 6. Mass Spectrometry Tools","what":"calculate_exact_mass()","title":"API Schema Documentation","text":"Purpose: Calculate exact mass lipid species Parameters: REST Endpoint: GET /moverz/exactmass/{lipid_abbrev}/{ion_type} Returns: Tibble calculated mass","code":"calculate_exact_mass(   client,                    # mw_rest_client object   lipid_abbrev,             # Character - Lipid abbreviation (e.g., \"PC(34:1)\")   ion_type                  # Character - Ion type (e.g., \"M+H\", \"M-H\") ) ├── lipid_abbreviation : Character ├── ion_type          : Character ├── exactmass         : Numeric ├── formula           : Character └── adduct_mass       : Numeric"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"response_to_df","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 7. Utility Functions","what":"response_to_df()","title":"API Schema Documentation","text":"Purpose: Convert API responses tibbles Parameters: Input Types Handled: Flat named lists: list(name = \"value\", id = 123) Row-based responses: list(Row1 = list(...), Row2 = list(...)) Nested DATA responses: list(metadata..., DATA = data.frame(...)) Lists lists: list(list(...), list(...)) Returns: Tibble (structure depends input type)","code":"response_to_df(   response        # List - Parsed API response )"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"flatten_entry","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 7. Utility Functions","what":"flatten_entry()","title":"API Schema Documentation","text":"Purpose: Flatten metabolite entries nested sample data Parameters: Required Entry Structure: Returns: Single-row tibble flattened structure","code":"flatten_entry(   entry           # List - Single metabolite entry with DATA field ) entry: ├── study_id          : Character (optional) ├── analysis_id       : Character (optional) ├── analysis_summary  : Character (optional) ├── metabolite_name   : Character (optional) ├── metabolite_id     : Character (optional) ├── refmet_name       : Character (optional) ├── units             : Character (optional) └── DATA              : Data.frame (required)     ├── sample1       : Numeric     ├── sample2       : Numeric     └── [more samples]: Numeric"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"list_endpoints","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > 7. Utility Functions","what":"list_endpoints()","title":"API Schema Documentation","text":"Purpose: Display available API endpoints Parameters: Returns: NULL (called side effects - prints console)","code":"list_endpoints(   client          # mw_rest_client object (for method dispatch) )"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"database-identifiers","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > Parameter Value Specifications","what":"Database Identifiers","title":"API Schema Documentation","text":"Study IDs: - Format: \"ST\" + 6-digit number (e.g., “ST000001”) - Special: \"ST\" returns studies Registry Numbers: - Format: Numeric string (e.g., “1”, “123”) - Used Metabolomics Workbench internal system PubChem CIDs: - Format: Numeric string (e.g., “5793”) - Links PubChem database","code":""},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"analysis-types","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > Parameter Value Specifications","what":"Analysis Types","title":"API Schema Documentation","text":"","code":"Valid values: \"LCMS\", \"GCMS\", \"GCMS_TMS\", \"HILIC\", \"RP\", \"NMR\", \"MS\", \"MSn\""},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"ion-types","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > Parameter Value Specifications","what":"Ion Types","title":"API Schema Documentation","text":"","code":"Common values: \"M+H\", \"M-H\", \"M+Na\", \"M+K\", \"M+NH4\", \"M+2H\", \"M-2H\", \"M+H-H2O\""},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"species","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > Parameter Value Specifications","what":"Species","title":"API Schema Documentation","text":"","code":"Common values: \"Human\", \"Mouse\", \"Rat\", \"Yeast\", \"E. coli\", \"Arabidopsis\", \"Drosophila\""},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"sample-sources","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > Parameter Value Specifications","what":"Sample Sources","title":"API Schema Documentation","text":"","code":"Common values: \"Blood\", \"Urine\", \"Tissue\", \"Cell\", \"Liver\", \"Brain\", \"Muscle\", \"Plasma\", \"Serum\""},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"chromatography-types","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > Parameter Value Specifications","what":"Chromatography Types","title":"API Schema Documentation","text":"","code":"Valid values: \"HILIC\", \"RP\", \"GC\", \"Ion-pair\", \"RPLC\", \"Normal phase\""},{"path":[]},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"http-status-codes","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > Error Handling Schema","what":"HTTP Status Codes","title":"API Schema Documentation","text":"200: Success 400: Bad Request (invalid parameters) 404: Found (invalid ID/endpoint) 500: Internal Server Error 503: Service Unavailable","code":""},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"error-response-structure","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > Error Handling Schema","what":"Error Response Structure","title":"API Schema Documentation","text":"","code":"API Error Response: ├── status_code       : Numeric ├── error_message     : Character └── request_url       : Character (for debugging)  R Error Handling: ├── Parameter validation (before API call) ├── HTTP error catching (during API call) ├── Response parsing errors (after API call) └── Informative error messages (user-friendly)"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"common-error-scenarios","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > Error Handling Schema","what":"Common Error Scenarios","title":"API Schema Documentation","text":"Invalid Study ID: Returns empty result 404 Invalid Compound ID: Returns empty result Network Issues: Automatic retry (3 attempts) Malformed Parameters: Validation errors API call API Rate Limiting: Built-backoff retry","code":""},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"caching-strategy","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > Performance Considerations","what":"Caching Strategy","title":"API Schema Documentation","text":"","code":"Cache Key Structure: \"{endpoint_url}_{parameters_hash}\" Cache Location: {cache_dir}/httr2_cache/ Cache Expiration: Session-based (temporary directory)"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"rate-limiting","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > Performance Considerations","what":"Rate Limiting","title":"API Schema Documentation","text":"Built-: 3 retry attempts exponential backoff Recommended: 1-2 second delays batch requests API Limits: officially documented, respectful","code":""},{"path":[]},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"tidyverse-integration","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > Integration Patterns","what":"Tidyverse Integration","title":"API Schema Documentation","text":"functions return tibbles compatible dplyr, ggplot2, tidyverse packages:","code":"# Chaining operations result <- client %>%   get_study_summary() %>%   filter(grepl(\"Human\", study_title)) %>%   slice_head(n = 10)"},{"path":"https://danymukesha.github.io/mwbenchr/articles/api_schema.html","id":"bioconductor-integration","dir":"Articles","previous_headings":"mwbenchr API Schema Documentation > Integration Patterns","what":"Bioconductor Integration","title":"API Schema Documentation","text":"package doesn’t return Bioconductor core classes, tibble outputs can easily converted: schema provides complete technical specification mwbenchr functions interaction Metabolomics Workbench REST API.","code":"# Convert to SummarizedExperiment (example) study_data <- get_study_data(client, \"ST000001\") # ... conversion code would go here sessioninfo::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.5.1 (2025-06-13) ##  os       Ubuntu 24.04.3 LTS ##  system   x86_64, linux-gnu ##  ui       X11 ##  language en ##  collate  C.UTF-8 ##  ctype    C.UTF-8 ##  tz       UTC ##  date     2025-09-01 ##  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) ##  quarto   NA ##  ## ─ Packages ─────────────────────────────────────────────────────────────────── ##  package     * version date (UTC) lib source ##  bslib         0.9.0   2025-01-30 [1] RSPM ##  cachem        1.1.0   2024-05-16 [1] RSPM ##  cli           3.6.5   2025-04-23 [1] RSPM ##  desc          1.4.3   2023-12-10 [1] RSPM ##  digest        0.6.37  2024-08-19 [1] RSPM ##  evaluate      1.0.5   2025-08-27 [1] RSPM ##  fastmap       1.2.0   2024-05-15 [1] RSPM ##  fs            1.6.6   2025-04-12 [1] RSPM ##  htmltools     0.5.8.1 2024-04-04 [1] RSPM ##  jquerylib     0.1.4   2021-04-26 [1] RSPM ##  jsonlite      2.0.0   2025-03-27 [1] RSPM ##  knitr         1.50    2025-03-16 [1] RSPM ##  lifecycle     1.0.4   2023-11-07 [1] RSPM ##  pkgdown       2.1.3   2025-05-25 [1] any (@2.1.3) ##  R6            2.6.1   2025-02-15 [1] RSPM ##  ragg          1.4.0   2025-04-10 [1] RSPM ##  rlang         1.1.6   2025-04-11 [1] RSPM ##  rmarkdown     2.29    2024-11-04 [1] RSPM ##  sass          0.4.10  2025-04-11 [1] RSPM ##  sessioninfo   1.2.3   2025-02-05 [1] any (@1.2.3) ##  systemfonts   1.2.3   2025-04-30 [1] RSPM ##  textshaping   1.0.1   2025-05-01 [1] RSPM ##  xfun          0.53    2025-08-19 [1] RSPM ##  yaml          2.3.10  2024-07-26 [1] RSPM ##  ##  [1] /home/runner/work/_temp/Library ##  [2] /opt/R/4.5.1/lib/R/site-library ##  [3] /opt/R/4.5.1/lib/R/library ##  ## ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with {mwbenchr}","text":"mwbenchr package provides R interface Metabolomics Workbench REST API, enabling programmatic access one largest metabolomics data repositories. vignette demonstrates use mwbenchr retrieve study data, compound information, perform common metabolomics data analysis tasks.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"what-is-metabolomics-workbench","dir":"Articles","previous_headings":"Introduction","what":"What is Metabolomics Workbench?","title":"Getting Started with {mwbenchr}","text":"Metabolomics Workbench public repository metabolomics data, metadata, analysis tools. contains thousands studies across various species, sample types, analytical platforms, making invaluable resource metabolomics research.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"set-up-libraries","dir":"Articles","previous_headings":"Getting Started","what":"Set-up libraries","title":"Getting Started with {mwbenchr}","text":"","code":"library(mwbenchr) library(dplyr) library(ggplot2)"},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"creating-a-client","dir":"Articles","previous_headings":"Getting Started","what":"Creating a Client","title":"Getting Started with {mwbenchr}","text":"interactions API begin creating client object:","code":"# Caching enabled client (recommended for repeated queries: enable caching) client <- mw_rest_client(cache = TRUE)  # Custom client configuration client <- mw_rest_client(     cache = TRUE,     cache_dir = tempdir(),     timeout = 60 )  # Basic client with default settings client <- mw_rest_client()  client #> Metabolomics Workbench REST Client #>   Base URL: https://www.metabolomicsworkbench.org/rest  #>   Caching: Disabled  #>   Timeout: 30 seconds"},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"exploring-available-endpoints","dir":"Articles","previous_headings":"Getting Started","what":"Exploring Available Endpoints","title":"Getting Started with {mwbenchr}","text":"Get overview available functions:","code":"list_endpoints(client)"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"discovering-studies","dir":"Articles","previous_headings":"Working with Studies","what":"Discovering Studies","title":"Getting Started with {mwbenchr}","text":"Start getting overview available studies:","code":"# Obtain all studies (this returns a lot of data) all_studies <- get_study_summary(client)  head(all_studies, 3) #> # A tibble: 3 × 6 #>   study_id study_title         species institute analysis_type number_of_samples #>   <chr>    <chr>               <chr>   <chr>     <chr>         <chr>             #> 1 ST004148 Surface Acoustic W… Homo s… Universi… LC-MS         42                #> 2 ST004144 Metabolic rewiring… Homo s… Brunel U… LC-MS         294               #> 3 ST004134 Metabolomic analys… Mus mu… Indian I… LC-MS         13 colnames(all_studies) #> [1] \"study_id\"          \"study_title\"       \"species\"           #> [4] \"institute\"         \"analysis_type\"     \"number_of_samples\""},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"filtering-and-exploring-studies","dir":"Articles","previous_headings":"Working with Studies","what":"Filtering and Exploring Studies","title":"Getting Started with {mwbenchr}","text":"","code":"# Filter for human studies human_studies <- all_studies %>%     filter(grepl(\"Human\", study_title, ignore.case = TRUE)) %>%     select(         study_id, study_title # , submit_date, last_modified     )  # Look for specific topics diabetes_studies <- all_studies %>%     filter(grepl(\"diabetes|glucose\", study_title, ignore.case = TRUE))  print(paste(\"Found\", nrow(diabetes_studies), \"diabetes-related studies\")) #> [1] \"Found 113 diabetes-related studies\""},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"getting-detailed-study-information","dir":"Articles","previous_headings":"Working with Studies","what":"Getting Detailed Study Information","title":"Getting Started with {mwbenchr}","text":"’ve identified studies interest, get detailed information:","code":"# Get experimental factors (sample metadata) for a study study_id <- \"ST000001\" factors <- get_study_factors(client, study_id) head(factors) #> # A tibble: 6 × 6 #>   study_id local_sample_id sample_source factors           mb_sample_id raw_data #>   <chr>    <chr>           <chr>         <chr>             <chr>        <chr>    #> 1 ST000001 LabF_115904     Plant         Arabidopsis Geno… SA000019     \"\"       #> 2 ST000001 LabF_115909     Plant         Arabidopsis Geno… SA000020     \"\"       #> 3 ST000001 LabF_115914     Plant         Arabidopsis Geno… SA000021     \"\"       #> 4 ST000001 LabF_115919     Plant         Arabidopsis Geno… SA000022     \"\"       #> 5 ST000001 LabF_115924     Plant         Arabidopsis Geno… SA000023     \"\"       #> 6 ST000001 LabF_115929     Plant         Arabidopsis Geno… SA000024     \"\"  # Obtain the list of metabolites measured metabolites <- get_study_metabolites(client, study_id) head(metabolites) #> # A tibble: 6 × 5 #>   study_id analysis_id analysis_summary       metabolite_name        refmet_name #>   <chr>    <chr>       <chr>                  <chr>                  <chr>       #> 1 ST000001 AN000001    GCMS positive ion mode 1,2,4-benzenetriol     1,2,4-Trih… #> 2 ST000001 AN000001    GCMS positive ion mode 1-monostearin          MG 18:0/0:… #> 3 ST000001 AN000001    GCMS positive ion mode 2-hydroxyvaleric acid  2-Hydroxyv… #> 4 ST000001 AN000001    GCMS positive ion mode 3-phosphoglycerate     3-Phosphog… #> 5 ST000001 AN000001    GCMS positive ion mode 5-hydroxynorvaline NI… 2-Amino-5-… #> 6 ST000001 AN000001    GCMS positive ion mode adenosine              Adenosine  # The complete data matrix study_data <- get_study_data(client, study_id) dim(study_data) #> [1] 2448    8"},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"advanced-study-search-with-metstat","dir":"Articles","previous_headings":"","what":"Advanced Study Search with MetStat","title":"Getting Started with {mwbenchr}","text":"MetStat functionality allows sophisticated searching across multiple criteria:","code":"# Search for human blood LCMS studies human_blood_lcms <- search_metstat(client,     analysis_type = \"LCMS\",     species = \"Human\",     sample_source = \"Blood\" )  # Search for mouse liver studies with any analytical method mouse_liver <- search_metstat(client,     species = \"Mouse\",     sample_source = \"Liver\" )  # Search for studies containing specific metabolites glucose_studies <- search_metstat(client, refmet_name = \"Glucose\")  # Complex search combining multiple criteria complex_search <- search_metstat(client,     analysis_type = \"LCMS\",     polarity = \"POSITIVE\",     species = \"Human\",     sample_source = \"Urine\" )"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"retrieving-compound-information","dir":"Articles","previous_headings":"Working with Compounds","what":"Retrieving Compound Information","title":"Getting Started with {mwbenchr}","text":"Get detailed information specific compounds:","code":"# Get compound by registry number compound_1 <- get_compound_by_regno(client, \"1\") print(compound_1$systematic_name) #> NULL  # Get compound by PubChem CID glucose_pubchem <- get_compound_by_pubchem_cid(client, \"5793\")  # Get specific fields only compound_name <- get_compound_by_regno(client, \"1\", fields = \"name\")  # Get classification hierarchy classification <- get_compound_classification(client, \"regno\", \"1\") head(classification) #> # A tibble: 1 × 5 #>   regno name                                  sys_name lm_category lm_main_class #>   <chr> <chr>                                 <chr>    <chr>       <chr>         #> 1 1     2-methoxy-12-methyloctadec-17-en-5-y… 2-metho… Fatty Acyl… Other Fatty …"},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"downloading-structure-files","dir":"Articles","previous_headings":"Working with Compounds","what":"Downloading Structure Files","title":"Getting Started with {mwbenchr}","text":"","code":"# Download MOL file mol_content <- download_compound_structure(client, \"regno\", \"1\", \"molfile\")  # Save to file # writeLines(mol_content, \"glucose.mol\")  # Download SDF format sdf_content <- download_compound_structure(client, \"regno\", \"1\", \"sdf\")"},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"refmet-integration","dir":"Articles","previous_headings":"","what":"RefMet Integration","title":"Getting Started with {mwbenchr}","text":"RefMet provides standardized metabolite nomenclature:","code":"# Get RefMet information for a metabolite glucose_refmet <- get_refmet_by_name(client, \"Glucose\")  # Standardize alternative names standardized <- standardize_to_refmet(client, \"D-glucose\") print(standardized$refmet_name) #> [1] \"Glucose\"  # Get all RefMet names (large dataset - use caching!) client_cached <- mw_rest_client(cache = TRUE) # all_refmet <- get_all_refmet_names(client_cached)"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"searching-by-mass","dir":"Articles","previous_headings":"Mass Spectrometry Tools","what":"Searching by Mass","title":"Getting Started with {mwbenchr}","text":"Find compounds based accurate mass measurements:","code":"# Search in RefMet database mass_matches <- search_by_mass(client,     db = \"REFMET\",     mz = 180.063,     ion_type = \"M+H\",     tolerance = 0.01 )  head(mass_matches) #> # A tibble: 6 × 10 #>   `Input m/z` `Matched m/z` Delta Name  `Systematic name` Formula Ion   Category #>         <dbl>         <dbl> <dbl> <chr> <chr>             <chr>   <chr> <chr>    #> 1        180.          180.  4e-4 1D-c… (1R,2R,3R,4R,5S,… C6H12O6 Neut… Organic… #> 2        180.          180.  4e-4 Allo… (3S,4S,5R,6S)-6-… C6H12O6 Neut… Organic… #> 3        180.          180.  4e-4 D-Ta… (3S,4S,5R)-1,3,4… C6H12O6 Neut… Organic… #> 4        180.          180.  4e-4 Fruc… (3S,4R,5R)-1,3,4… C6H12O6 Neut… Carbohy… #> 5        180.          180.  4e-4 Gala… (3R,4S,5R,6R)-6-… C6H12O6 Neut… Carbohy… #> 6        180.          180.  4e-4 Gluc… (3R,4S,5S,6R)-6-… C6H12O6 Neut… Carbohy… #> # ℹ 2 more variables: `Main class` <chr>, `Sub class` <chr>  # Search in lipids database with different ion type lipid_matches <- search_by_mass(client,     db = \"LIPIDS\",     mz = 760.585,     ion_type = \"M+H\",     tolerance = 0.05 )  # Compare results across databases mb_matches <- search_by_mass(client,     db = \"MB\",     mz = 180.063,     ion_type = \"M+H\",     tolerance = 0.01 )"},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"calculating-exact-masses","dir":"Articles","previous_headings":"Mass Spectrometry Tools","what":"Calculating Exact Masses","title":"Getting Started with {mwbenchr}","text":"Calculate theoretical masses lipid species:","code":"# Calculate exact mass for phosphatidylcholine pc_mass <- calculate_exact_mass(client, \"PC(34:1)\", \"M+H\") print(paste(\"PC(34:1) [M+H]+ =\", pc_mass$mz)) #> [1] \"PC(34:1) [M+H]+ = 760.585077\"  # Different ion types pc_sodium <- calculate_exact_mass(client, \"PC(34:1)\", \"M+Na\") pc_negative <- calculate_exact_mass(client, \"PC(34:1)\", \"M-H\")  # Compare masses mass_comparison <- data.frame(     ion_type = c(\"M+H\", \"M+Na\", \"M-H\"),     exact_mass = c(pc_mass$mz, pc_sodium$mz, pc_negative$mz) ) print(mass_comparison) #>   ion_type exact_mass #> 1      M+H   760.5851 #> 2     M+Na   782.5670 #> 3      M-H   758.5705"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"complete-metabolomics-study-analysis","dir":"Articles","previous_headings":"Data Integration and Analysis Workflows","what":"Complete Metabolomics Study Analysis","title":"Getting Started with {mwbenchr}","text":"’s complete workflow analyzing metabolomics study:","code":"# 1. Find relevant studies studies <- search_metstat(client,     analysis_type = \"LCMS\",     species = \"Human\",     sample_source = \"Blood\" )  # Select a study of interest target_study <- studies$study[1]  # 2. Get study metadata study_info <- get_study_summary(client, target_study) factors <- get_study_factors(client, target_study) metabolites <- get_study_metabolites(client, target_study)  # 3. Get the data matrix data_matrix <- get_study_data(client, target_study)  # 4. Basic data exploration cat(\"Study:\", study_info$study_title, \"\\n\") #> Study: Surface Acoustic Wave Hemolysis Assay for Evaluating Stored Red Blood Cells cat(\"Number of samples:\", ncol(data_matrix) - 7, \"\\n\") # Subs. metadata columns #> Number of samples: 1 cat(\"Number of metabolites:\", nrow(data_matrix), \"\\n\") #> Number of metabolites: 7014  # 5. Data processing numeric_data <- data_matrix %>%     select(-c(study_id:units)) %>% # Remove metadata columns     mutate(across(everything(), as.numeric))  # Calculate basic statistics metabolite_stats <- data_matrix %>%     select(metabolite_name, refmet_name) %>%     bind_cols(         mean_intensity = rowMeans(numeric_data, na.rm = TRUE),         cv = apply(numeric_data, 1, function(x) {             sd(x, na.rm = TRUE) / mean(x, na.rm = TRUE)         })     )  head(metabolite_stats) #> # A tibble: 6 × 4 #>   metabolite_name        refmet_name                mean_intensity    cv #>   <chr>                  <chr>                               <dbl> <dbl> #> 1 10-Formyldihydrofolate 10-Formyldihydrofolic acid           NaN     NA #> 2 10-Formyldihydrofolate 10-Formyldihydrofolic acid         11905.    NA #> 3 10-Formyldihydrofolate 10-Formyldihydrofolic acid         14177.    NA #> 4 10-Formyldihydrofolate 10-Formyldihydrofolic acid         13401.    NA #> 5 10-Formyldihydrofolate 10-Formyldihydrofolic acid         35540.    NA #> 6 10-Formyldihydrofolate 10-Formyldihydrofolic acid         15646.    NA"},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"standardizing-metabolite-names","dir":"Articles","previous_headings":"Data Integration and Analysis Workflows","what":"Standardizing Metabolite Names","title":"Getting Started with {mwbenchr}","text":"Standardize metabolite names across different studies:","code":"# Get metabolites from multiple studies study1_metabolites <- get_study_metabolites(client, \"ST000001\") study2_metabolites <- get_study_metabolites(client, \"ST000002\")  # Combine and get unique names all_metabolite_names <- unique(c(     study1_metabolites$metabolite_name,     study2_metabolites$metabolite_name ))  # Standardize names (in practice, you'd do this in batches) standardized_names <- lapply(all_metabolite_names[1:5], function(name) {     tryCatch(         {             result <- standardize_to_refmet(client, name)             data.frame(                 original_name = name,                 refmet_name = result$refmet_name %||% NA,                 stringsAsFactors = FALSE             )         },         error = function(e) {             data.frame(                 original_name = name,                 refmet_name = NA,                 stringsAsFactors = FALSE             )         }     ) })  standardization_results <- do.call(rbind, standardized_names) print(standardization_results) #>             original_name                     refmet_name #> 1      1,2,4-benzenetriol         1,2,4-Trihydroxybenzene #> 2           1-monostearin                 MG 18:0/0:0/0:0 #> 3   2-hydroxyvaleric acid           2-Hydroxyvaleric acid #> 4      3-phosphoglycerate          3-Phosphoglyceric acid #> 5 5-hydroxynorvaline NIST 2-Amino-5-hydroxypentanoic acid"},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"cross-study-comparisons","dir":"Articles","previous_headings":"Data Integration and Analysis Workflows","what":"Cross-Study Comparisons","title":"Getting Started with {mwbenchr}","text":"Compare metabolite coverage across studies:","code":"# Get metabolites from multiple studies studies_to_compare <- c(\"ST000001\", \"ST000002\", \"ST000003\")  metabolite_coverage <- lapply(studies_to_compare, function(study_id) {     metabolites <- get_study_metabolites(client, study_id)     data.frame(         study_id = study_id,         metabolite_count = nrow(metabolites),         unique_refmet = length(unique(metabolites$refmet_name)),         stringsAsFactors = FALSE     ) })  coverage_df <- do.call(rbind, metabolite_coverage) print(coverage_df) #>   study_id metabolite_count unique_refmet #> 1 ST000001              102            99 #> 2 ST000002              142           141 #> 3 ST000003               51            51"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"study-statistics","dir":"Articles","previous_headings":"Visualization Examples","what":"Study Statistics","title":"Getting Started with {mwbenchr}","text":"","code":"# Visualize study submission over time studies_with_dates <- all_studies %>%     filter(!is.na(submit_date)) %>%     mutate(         submit_year = as.numeric(format(as.Date(submit_date), \"%Y\")),         analysis_type = case_when(             grepl(\"LCMS\", study_title, ignore.case = TRUE) ~ \"LC-MS\",             grepl(\"GCMS\", study_title, ignore.case = TRUE) ~ \"GC-MS\",             grepl(\"NMR\", study_title, ignore.case = TRUE) ~ \"NMR\",             TRUE ~ \"Other\"         )     ) %>%     filter(submit_year >= 2010 & submit_year <= 2023)  # Plot submissions by year and analysis type ggplot(studies_with_dates, aes(x = submit_year, fill = analysis_type)) +     geom_bar(position = \"stack\") +     labs(         title = \"Metabolomics Workbench Study Submissions by Year\",         x = \"Submission Year\",         y = \"Number of Studies\",         fill = \"Analysis Type\"     ) +     theme_minimal()"},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"mass-accuracy-visualization","dir":"Articles","previous_headings":"Visualization Examples","what":"Mass Accuracy Visualization","title":"Getting Started with {mwbenchr}","text":"","code":"# Compare mass accuracy across different tolerances tolerance_values <- c(0.001, 0.005, 0.01, 0.05, 0.1) target_mz <- 180.063  mass_accuracy_results <- lapply(tolerance_values, function(tol) {     matches <- search_by_mass(client, \"REFMET\", target_mz, \"M+H\", tol)     data.frame(         tolerance = tol,         matches = nrow(matches),         stringsAsFactors = FALSE     ) })  accuracy_df <- do.call(rbind, mass_accuracy_results)  ggplot(accuracy_df, aes(x = tolerance, y = matches)) +     geom_line() +     geom_point() +     scale_x_log10() +     labs(         title = \"Number of Mass Matches vs. Tolerance\",         x = \"Mass Tolerance (Da, log scale)\",         y = \"Number of Matches\"     ) +     theme_minimal()"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"robust-api-calls","dir":"Articles","previous_headings":"Error Handling and Best Practices","what":"Robust API Calls","title":"Getting Started with {mwbenchr}","text":"Making safely API calls retries","code":"safe_api_call <- function(func, ..., max_attempts = 3) {     for (attempt in 1:max_attempts) {         result <- tryCatch(             {                 func(...)             },             error = function(e) {                 if (attempt == max_attempts) {                     stop(                         \"API call failed after \", max_attempts, \" attempts: \",                         e$message                     )                 }                 message(\"Attempt \", attempt, \" failed, retrying...\")                 Sys.sleep(1)                 NULL             }         )          if (!is.null(result)) {             return(result)         }     } }  study_data <- safe_api_call(get_study_summary, client, \"ST000001\")"},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"batch-processing","dir":"Articles","previous_headings":"Error Handling and Best Practices","what":"Batch Processing","title":"Getting Started with {mwbenchr}","text":"Processing multiple studies efficiently","code":"process_studies <- function(client, study_ids, max_concurrent = 5) {     results <- list()      for (i in seq_along(study_ids)) {         study_id <- study_ids[i]          cat(\"Processing study\", i, \"of\", length(study_ids), \":\", study_id, \"\\n\")          tryCatch(             {                 summary <- get_study_summary(client, study_id)                 metabolites <- get_study_metabolites(client, study_id)                  results[[study_id]] <- list(                     summary = summary,                     metabolite_count = nrow(metabolites),                     metabolites = metabolites$metabolite_name                 )                  if (i %% max_concurrent == 0) {                     Sys.sleep(1)                 }             },             error = function(e) {                 warning(\"Failed to process study \", study_id, \": \", e$message)                 results[[study_id]] <- list(error = e$message)             }         )     }      return(results) }  # simple usage (with a small subset) study_subset <- all_studies$study_id[1:3] batch_results <- process_studies(client, study_subset) #> Processing study 1 of 3 : ST004148  #> Processing study 2 of 3 : ST004144  #> Processing study 3 of 3 : ST004134"},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"using-caching","dir":"Articles","previous_headings":"Performance Optimization","what":"Using Caching","title":"Getting Started with {mwbenchr}","text":"","code":"# set up caching for expensive operations cached_client <- mw_rest_client(     cache = TRUE,     cache_dir = file.path(tempdir(), \"mwbenchr_cache\") ) refmet_data <- get_all_refmet_names(cached_client) # Large dataset study_list <- get_study_summary(cached_client) # Frequently accessed  # subsequent calls will use cached data refmet_data_cached <- get_all_refmet_names(cached_client) # Fast!"},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"memory-management","dir":"Articles","previous_headings":"Performance Optimization","what":"Memory Management","title":"Getting Started with {mwbenchr}","text":"","code":"# For large datasets, process in chunks process_large_study <- function(client, study_id) {     # Get metadata first (small)     summary <- get_study_summary(client, study_id)     metabolites <- get_study_metabolites(client, study_id)      # Check data size before loading full matrix     n_metabolites <- nrow(metabolites)      if (n_metabolites > 1000) {         warning(             \"Large study detected (\", n_metabolites, \" metabolites). \",             \"Consider processing in chunks.\"         )     }      # Load full data only if reasonable size     if (n_metabolites <= 5000) {         data_matrix <- get_study_data(client, study_id)         return(list(             summary = summary,             metabolites = metabolites,             data = data_matrix         ))     } else {         return(list(             summary = summary,             metabolites = metabolites,             data = NULL,             note = \"Data matrix too large - not loaded\"         ))     } } sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.1 (2025-06-13) #>  os       Ubuntu 24.04.3 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-09-01 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package      * version date (UTC) lib source #>  BiocManager    1.30.26 2025-06-05 [1] RSPM #>  BiocStyle    * 2.36.0  2025-04-15 [1] Bioconduc~ #>  bit            4.6.0   2025-03-06 [1] RSPM #>  bit64          4.6.0-1 2025-01-16 [1] RSPM #>  bookdown       0.44    2025-08-21 [1] RSPM #>  bslib          0.9.0   2025-01-30 [1] RSPM #>  cachem         1.1.0   2024-05-16 [1] RSPM #>  cli            3.6.5   2025-04-23 [1] RSPM #>  crayon         1.5.3   2024-06-20 [1] RSPM #>  curl           7.0.0   2025-08-19 [1] RSPM #>  desc           1.4.3   2023-12-10 [1] RSPM #>  digest         0.6.37  2024-08-19 [1] RSPM #>  dplyr        * 1.1.4   2023-11-17 [1] RSPM #>  evaluate       1.0.5   2025-08-27 [1] RSPM #>  farver         2.1.2   2024-05-13 [1] RSPM #>  fastmap        1.2.0   2024-05-15 [1] RSPM #>  fs             1.6.6   2025-04-12 [1] RSPM #>  generics       0.1.4   2025-05-09 [1] RSPM #>  ggplot2      * 3.5.2   2025-04-09 [1] RSPM #>  glue           1.8.0   2024-09-30 [1] RSPM #>  gtable         0.3.6   2024-10-25 [1] RSPM #>  htmltools      0.5.8.1 2024-04-04 [1] RSPM #>  httr2          1.2.1   2025-07-22 [1] RSPM #>  jquerylib      0.1.4   2021-04-26 [1] RSPM #>  jsonlite       2.0.0   2025-03-27 [1] RSPM #>  knitr          1.50    2025-03-16 [1] RSPM #>  labeling       0.4.3   2023-08-29 [1] RSPM #>  lifecycle      1.0.4   2023-11-07 [1] RSPM #>  magrittr       2.0.3   2022-03-30 [1] RSPM #>  mwbenchr     * 0.0.1   2025-09-01 [1] local #>  pillar         1.11.0  2025-07-04 [1] RSPM #>  pkgconfig      2.0.3   2019-09-22 [1] RSPM #>  pkgdown        2.1.3   2025-05-25 [1] any (@2.1.3) #>  purrr          1.1.0   2025-07-10 [1] RSPM #>  R6             2.6.1   2025-02-15 [1] RSPM #>  ragg           1.4.0   2025-04-10 [1] RSPM #>  rappdirs       0.3.3   2021-01-31 [1] RSPM #>  RColorBrewer   1.1-3   2022-04-03 [1] RSPM #>  rlang          1.1.6   2025-04-11 [1] RSPM #>  rmarkdown      2.29    2024-11-04 [1] RSPM #>  sass           0.4.10  2025-04-11 [1] RSPM #>  scales         1.4.0   2025-04-24 [1] RSPM #>  sessioninfo    1.2.3   2025-02-05 [1] any (@1.2.3) #>  systemfonts    1.2.3   2025-04-30 [1] RSPM #>  textshaping    1.0.1   2025-05-01 [1] RSPM #>  tibble         3.3.0   2025-06-08 [1] RSPM #>  tidyselect     1.2.1   2024-03-11 [1] RSPM #>  tzdb           0.5.0   2025-03-15 [1] RSPM #>  utf8           1.2.6   2025-06-08 [1] RSPM #>  vctrs          0.6.5   2023-12-01 [1] RSPM #>  vroom          1.6.5   2023-12-05 [1] RSPM #>  withr          3.0.2   2024-10-28 [1] RSPM #>  xfun           0.53    2025-08-19 [1] RSPM #>  yaml           2.3.10  2024-07-26 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.1/lib/R/site-library #>  [3] /opt/R/4.5.1/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://danymukesha.github.io/mwbenchr/articles/mwbenchr.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Getting Started with {mwbenchr}","text":"demonstrated key functionality mwbenchr accessing analyzing metabolomics data Metabolomics Workbench. key takeaways: Client Setup: Always start mw_rest_client(), enable caching better performance Study Discovery: Use get_study_summary() search_metstat() find relevant studies Data Retrieval: Get detailed study information study-specific functions Compound Analysis: Use compound functions mass spectrometry tools molecular identification Name Standardization: Leverage RefMet consistent metabolite naming Best Practices: Implement error handling, use caching, consider rate limiting information, see function documentation (?function_name) visit Metabolomics Workbench website.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dany Mukesha. Author, maintainer.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mukesha D (2025). mwbenchr: R Interface Metabolomics Workbench REST API. R package version 0.0.1, https://github.com/danymukesha/mwbenchr.","code":"@Manual{,   title = {mwbenchr: R Interface to Metabolomics Workbench REST API},   author = {Dany Mukesha},   year = {2025},   note = {R package version 0.0.1},   url = {https://github.com/danymukesha/mwbenchr}, }"},{"path":"https://danymukesha.github.io/mwbenchr/index.html","id":"mwbenchr-","dir":"","previous_headings":"","what":"R Interface to Metabolomics Workbench REST API","title":"R Interface to Metabolomics Workbench REST API","text":"mission: cover REST API endpoints provided Metabolomics Workbench REST API (v1.2). ensure type safety strict validation inputs outputs. deliver tidy outputs well-structured data.frames ready analysis. support efficient workflows optional local caching API responses. respect API rate limits built-request throttling retry logic. enhance user experience clear informative API messages. mwbenchr enables programmatic access metabolomics data, compound information, study metadata, analytical tools one largest metabolomics data repositories. Use-case:","code":"## ----setup, include=FALSE----------------------------------------------------- knitr::opts_chunk$set(echo = TRUE)  ## ----initialize--------------------------------------------------------------- library(mwbenchr) client <- mw_rest_client()  ## ----compound----------------------------------------------------------------- # Get compound information by PubChem CID compound <- get_compound_by_pubchem_cid(client, 5281365) head(compound) #> # A tibble: 1 × 12 #>   pubchem_cid regno formula exactmass  inchi_key    name  sys_name lm_id kegg_id #>   <chr>       <chr> <chr>   <chr>      <chr>        <chr> <chr>    <chr> <chr>   #> 1 5281365     28467 C20H34O 290.260966 OJISWRZIEWC… Gera… 3,7,11,… LMPR… C09094  #> # ℹ 3 more variables: chebi_id <chr>, metacyc_id <chr>, smiles <chr>  ## ----study-------------------------------------------------------------------- # Get study summary study <- get_study_summary(client, \"ST000001\") head(study) #> # A tibble: 1 × 6 #>   study_id study_title         species institute analysis_type number_of_samples #>   <chr>    <chr>               <chr>   <chr>     <chr>         <chr>             #> 1 ST000001 Fatb Induction Exp… Arabid… Universi… GC-MS         24  ## ----metstat------------------------------------------------------------------ # Search for diabetes studies in human blood diabetes_studies <- search_metstat(   client,   species = \"Human\",   sample_source = \"Blood\",   disease = \"Diabetes\" ) head(diabetes_studies) #> # A tibble: 6 × 6 #>   row_id study    study_title                             species source disease #>   <chr>  <chr>    <chr>                                   <chr>   <chr>  <chr>   #> 1 Row1   ST003897 Postprandial Plasma Lipidomic Changes … Human   Blood  Diabet… #> 2 Row2   ST003896 Postprandial Plasma Metabolomic Change… Human   Blood  Diabet… #> 3 Row3   ST003895 Postprandial Plasma Metabolomic Change… Human   Blood  Diabet… #> 4 Row4   ST003894 Postprandial Plasma Lipidomic Changes … Human   Blood  Diabet… #> 5 Row5   ST003671 Discovery of Metabolic Biomarkers for … Human   Blood  Diabet… #> 6 Row6   ST003636 Individual glycemic responses to carbo… Human   Blood  Diabet…"},{"path":"https://danymukesha.github.io/mwbenchr/index.html","id":"all-features","dir":"","previous_headings":"","what":"All Features","title":"R Interface to Metabolomics Workbench REST API","text":"Study Access: Retrieve study summaries, experimental factors, metabolite lists, complete data matrices Compound Information: Access detailed compound data using registry numbers PubChem CIDs RefMet Integration: Standardize metabolite names using RefMet nomenclature Mass Spectrometry Tools: Search compounds mass calculate exact masses lipids Flexible Search: Find studies using multiple criteria (species, sample type, analytical method) Built-Caching: Optional response caching improved performance Robust Error Handling: Informative error messages automatic retries","code":""},{"path":[]},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/index.html","id":"enable-caching-for-better-performance","dir":"","previous_headings":"Advanced Usage","what":"Enable Caching for Better Performance","title":"R Interface to Metabolomics Workbench REST API","text":"","code":"# Enable caching for repeated queries client <- mw_rest_client(cache = TRUE, cache_dir = \"~/.mwbenchr_cache\")  # This will be cached refmet_names <- get_all_refmet_names(client)"},{"path":"https://danymukesha.github.io/mwbenchr/index.html","id":"search-with-multiple-criteria","dir":"","previous_headings":"Advanced Usage","what":"Search with Multiple Criteria","title":"R Interface to Metabolomics Workbench REST API","text":"","code":"# Find LCMS studies of mouse liver samples mouse_liver <- search_metstat(client,                              analysis_type = \"LCMS\",                              species = \"Mouse\",                              sample_source = \"Liver\")  # Search for diabetes-related studies with specific metabolite diabetes_glucose <- search_metstat(client,                                   disease = \"Diabetes\",                                   refmet_name = \"Glucose\")"},{"path":"https://danymukesha.github.io/mwbenchr/index.html","id":"mass-spectrometry-workflows","dir":"","previous_headings":"Advanced Usage","what":"Mass Spectrometry Workflows","title":"R Interface to Metabolomics Workbench REST API","text":"","code":"# Search for compounds by accurate mass matches <- search_by_mass(client,                          db = \"REFMET\",                          mz = 180.063,                          ion_type = \"M+H\",                          tolerance = 0.01)  # Calculate exact mass for lipid pc_mass <- calculate_exact_mass(client, \"PC(34:1)\", \"M+H\")"},{"path":"https://danymukesha.github.io/mwbenchr/reference/calculate_exact_mass.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate exact mass for lipid — calculate_exact_mass","title":"Calculate exact mass for lipid — calculate_exact_mass","text":"Calculate exact mass lipid given abbreviation ion type.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/calculate_exact_mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate exact mass for lipid — calculate_exact_mass","text":"","code":"calculate_exact_mass(client, lipid_abbrev, ion_type)"},{"path":"https://danymukesha.github.io/mwbenchr/reference/calculate_exact_mass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate exact mass for lipid — calculate_exact_mass","text":"client mw_rest_client object lipid_abbrev character string representing lipid abbreviation (e.g., \"PC(34:1)\", , \"PE(36:2)\"). ion_type character string representing ion type (e.g., \"M+H\", \"M-H\", \"M+Na\").","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/calculate_exact_mass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate exact mass for lipid — calculate_exact_mass","text":"tibble containing parsed data, calculated exact mass: lipid_abbrev lipid abbreviation (e.g., \"PC(34:1)\") ion_type ion type (e.g., \"M+H+\") lipid_name full lipid name (e.g., \"PC 34:1\") ion_type_parsed parsed ion type (e.g., \"M+H+\") mz m/z value (numeric, e.g., 760.585077) formula molecular formula (e.g., \"C42H83NO8P\")","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/calculate_exact_mass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate exact mass for lipid — calculate_exact_mass","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client()  # Calculate exact mass for phosphatidylcholine mass_info <- calculate_exact_mass(client, \"PC(34:1)\", \"M+H\") print(mass_info$exactmass)  # Calculate for different ion types mass_na <- calculate_exact_mass(client, \"PC(34:1)\", \"M+Na\") } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/download_compound_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Download compound structure file — download_compound_structure","title":"Download compound structure file — download_compound_structure","text":"Download molecular structure files various formats (MOL, SDF, PNG).","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/download_compound_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download compound structure file — download_compound_structure","text":"","code":"download_compound_structure(   client,   id_type,   id_value,   format = \"molfile\",   save_path = NULL )"},{"path":"https://danymukesha.github.io/mwbenchr/reference/download_compound_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download compound structure file — download_compound_structure","text":"client mw_rest_client object id_type Character. Identifier type (\"regno\", \"pubchem_cid\", etc.) id_value Character numeric. Identifier value format Character. File format (\"molfile\", \"sdf\" \"png\") save_path Character. Path save downloaded file. NULL, content returned character string.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/download_compound_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download compound structure file — download_compound_structure","text":"Character string containing structure file content NULL saved file","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/download_compound_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download compound structure file — download_compound_structure","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client() mol_file <- download_compound_structure(     client, \"regno\", \"1\", \"molfile\",     \"compound.mol\" )  # Save to file } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/flatten_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a metabolite entry with nested sample data — flatten_entry","title":"Flatten a metabolite entry with nested sample data — flatten_entry","text":"Converts single metabolite entry containing metadata nested DATA field flat tibble structure suitable analysis.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/flatten_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a metabolite entry with nested sample data — flatten_entry","text":"","code":"flatten_entry(entry)"},{"path":"https://danymukesha.github.io/mwbenchr/reference/flatten_entry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten a metabolite entry with nested sample data — flatten_entry","text":"entry List. metabolite entry metadata DATA field","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/flatten_entry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten a metabolite entry with nested sample data — flatten_entry","text":"tibble flattened metabolite sample data","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/flatten_entry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten a metabolite entry with nested sample data — flatten_entry","text":"","code":"if (FALSE) { # \\dontrun{ entry <- list(     study_id = \"ST001\",     metabolite_name = \"Glucose\",     DATA = data.frame(sample1 = 100, sample2 = 150) ) flatten_entry(entry) } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_all_refmet_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all RefMet names — get_all_refmet_names","title":"Get all RefMet names — get_all_refmet_names","text":"Retrieve complete list standardized metabolite names RefMet. can large, consider using caching.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_all_refmet_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all RefMet names — get_all_refmet_names","text":"","code":"get_all_refmet_names(client)"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_all_refmet_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all RefMet names — get_all_refmet_names","text":"client mw_rest_client object","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_all_refmet_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all RefMet names — get_all_refmet_names","text":"Tibble containing RefMet names","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_all_refmet_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all RefMet names — get_all_refmet_names","text":"","code":"if (FALSE) { # \\dontrun{ # Use caching for this large dataset client <- mw_rest_client(cache = TRUE) all_names <- get_all_refmet_names(client) } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_by_pubchem_cid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get compound information by PubChem CID — get_compound_by_pubchem_cid","title":"Get compound information by PubChem CID — get_compound_by_pubchem_cid","text":"Retrieve detailed compound information using PubChem Compound ID.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_by_pubchem_cid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get compound information by PubChem CID — get_compound_by_pubchem_cid","text":"","code":"get_compound_by_pubchem_cid(client, cid, fields = \"all\", format = \"json\")"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_by_pubchem_cid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get compound information by PubChem CID — get_compound_by_pubchem_cid","text":"client mw_rest_client object cid Character numeric. PubChem CID fields Character. Fields return (default: \"\") format Character. Output format (\"json\" \"txt\")","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_by_pubchem_cid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get compound information by PubChem CID — get_compound_by_pubchem_cid","text":"Tibble compound information (JSON) character string (txt)","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_by_pubchem_cid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get compound information by PubChem CID — get_compound_by_pubchem_cid","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client() compound_info <- get_compound_by_pubchem_cid(client, \"5793\") } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_by_regno.html","id":null,"dir":"Reference","previous_headings":"","what":"Get compound information by registry number — get_compound_by_regno","title":"Get compound information by registry number — get_compound_by_regno","text":"Retrieve detailed compound information using Metabolomics Workbench registry number.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_by_regno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get compound information by registry number — get_compound_by_regno","text":"","code":"get_compound_by_regno(client, regno, fields = \"all\", format = \"json\")"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_by_regno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get compound information by registry number — get_compound_by_regno","text":"client mw_rest_client object regno Character numeric. Registry number fields Character. Fields return (default: \"\") format Character. Output format (\"json\" \"txt\")","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_by_regno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get compound information by registry number — get_compound_by_regno","text":"Tibble compound information (JSON) character string (txt)","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_by_regno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get compound information by registry number — get_compound_by_regno","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client()  # Get all fields for a compound compound_info <- get_compound_by_regno(client, \"1\")  # Get only the name compound_name <- get_compound_by_regno(client, \"1\", fields = \"name\") } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Get compound classification hierarchy — get_compound_classification","title":"Get compound classification hierarchy — get_compound_classification","text":"Retrieve taxonomic classification hierarchy compound using various identifier types.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get compound classification hierarchy — get_compound_classification","text":"","code":"get_compound_classification(client, id_type, id_value)"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get compound classification hierarchy — get_compound_classification","text":"client mw_rest_client object id_type Character. Identifier type (\"regno\", \"pubchem_cid\", etc.) id_value Character numeric. Identifier value","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get compound classification hierarchy — get_compound_classification","text":"Tibble containing classification hierarchy","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_compound_classification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get compound classification hierarchy — get_compound_classification","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client() classification <- get_compound_classification(client, \"regno\", \"1\") } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_refmet_by_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get RefMet information by name — get_refmet_by_name","title":"Get RefMet information by name — get_refmet_by_name","text":"Retrieve RefMet (Reference list Metabolite names) information specific metabolite name.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_refmet_by_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get RefMet information by name — get_refmet_by_name","text":"","code":"get_refmet_by_name(client, name, fields = \"all\")"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_refmet_by_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get RefMet information by name — get_refmet_by_name","text":"client mw_rest_client object name Character. RefMet metabolite name fields Character. Fields return (default: \"\")","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_refmet_by_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get RefMet information by name — get_refmet_by_name","text":"Tibble containing RefMet information","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_refmet_by_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get RefMet information by name — get_refmet_by_name","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client() refmet_info <- get_refmet_by_name(client, \"Cholesterol\") } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get study data matrix — get_study_data","title":"Get study data matrix — get_study_data","text":"Retrieve complete data matrix specific study, including metabolite measurements across samples.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get study data matrix — get_study_data","text":"","code":"get_study_data(client, study_id)"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get study data matrix — get_study_data","text":"client mw_rest_client object study_id Character. Study ID","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get study data matrix — get_study_data","text":"Tibble containing study data matrix","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get study data matrix — get_study_data","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client() data_matrix <- get_study_data(client, \"ST000001\") } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get study experimental factors — get_study_factors","title":"Get study experimental factors — get_study_factors","text":"Retrieve experimental factors (sample metadata) specific study.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get study experimental factors — get_study_factors","text":"","code":"get_study_factors(client, study_id)"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get study experimental factors — get_study_factors","text":"client mw_rest_client object study_id Character. Study ID","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get study experimental factors — get_study_factors","text":"Tibble containing experimental factors","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get study experimental factors — get_study_factors","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client() factors <- get_study_factors(client, \"ST000001\") } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_metabolites.html","id":null,"dir":"Reference","previous_headings":"","what":"Get study metabolite list — get_study_metabolites","title":"Get study metabolite list — get_study_metabolites","text":"Retrieve list metabolites measured specific study.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_metabolites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get study metabolite list — get_study_metabolites","text":"","code":"get_study_metabolites(client, study_id)"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_metabolites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get study metabolite list — get_study_metabolites","text":"client mw_rest_client object study_id Character. Study ID","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_metabolites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get study metabolite list — get_study_metabolites","text":"Tibble containing metabolite information","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_metabolites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get study metabolite list — get_study_metabolites","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client() metabolites <- get_study_metabolites(client, \"ST000001\") } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get study summary information — get_study_summary","title":"Get study summary information — get_study_summary","text":"Retrieve summary information one studies Metabolomics Workbench database.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get study summary information — get_study_summary","text":"","code":"get_study_summary(client, study_id = \"ST\", format = \"json\")"},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get study summary information — get_study_summary","text":"client mw_rest_client object study_id Character. Study ID (use \"ST\" studies) format Character. Output format (\"json\" \"txt\")","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get study summary information — get_study_summary","text":"Study summary data tibble (JSON) character string (txt)","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/get_study_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get study summary information — get_study_summary","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client()  # Get all studies all_studies <- get_study_summary(client)  # Get specific study study_info <- get_study_summary(client, study_id = \"ST000001\") } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/list_endpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"List available API endpoints — list_endpoints","title":"List available API endpoints — list_endpoints","text":"Displays available endpoints mwbenchr package, organized functional category.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/list_endpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available API endpoints — list_endpoints","text":"","code":"list_endpoints(client)"},{"path":"https://danymukesha.github.io/mwbenchr/reference/list_endpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List available API endpoints — list_endpoints","text":"client mw_rest_client object (used internally; included future extensibility)","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/list_endpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List available API endpoints — list_endpoints","text":"Invisibly returns NULL. Called side effects.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/list_endpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List available API endpoints — list_endpoints","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client() list_endpoints(client) } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/mw_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a request to the Metabolomics Workbench REST API — mw_request","title":"Make a request to the Metabolomics Workbench REST API — mw_request","text":"Internal function handle HTTP requests API error handling response parsing.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/mw_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a request to the Metabolomics Workbench REST API — mw_request","text":"","code":"mw_request(client, endpoint, parse = TRUE, format = NULL, ...)"},{"path":"https://danymukesha.github.io/mwbenchr/reference/mw_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a request to the Metabolomics Workbench REST API — mw_request","text":"client mw_rest_client object endpoint Character. API endpoint path parse Logical. response parsed? (default: TRUE) format Character. Output format (\"json\" \"txt\") ... Additional parameters passed httr2::req_perform","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/mw_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a request to the Metabolomics Workbench REST API — mw_request","text":"Parsed API response (list JSON, character text)","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/mw_rest_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Metabolomics Workbench REST client — mw_rest_client","title":"Initialize Metabolomics Workbench REST client — mw_rest_client","text":"Create client object interacting Metabolomics Workbench REST API. client handles configuration base URL, caching, request timeouts.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/mw_rest_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Metabolomics Workbench REST client — mw_rest_client","text":"","code":"mw_rest_client(   base_url = \"https://www.metabolomicsworkbench.org/rest\",   cache = FALSE,   cache_dir = tempdir(),   timeout = 30 )"},{"path":"https://danymukesha.github.io/mwbenchr/reference/mw_rest_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Metabolomics Workbench REST client — mw_rest_client","text":"base_url Character. Base URL API (defaults production endpoint) cache Logical. responses cached? (default: FALSE) cache_dir Character. Directory cached responses (default: tempdir()) timeout Numeric. Request timeout seconds (default: 30)","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/mw_rest_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Metabolomics Workbench REST client — mw_rest_client","text":"S3 object class \"mw_rest_client\"","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/mw_rest_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Metabolomics Workbench REST client — mw_rest_client","text":"","code":"if (FALSE) { # \\dontrun{ # Create a client with default settings client <- mw_rest_client()  # Create a client with caching enabled client <- mw_rest_client(cache = TRUE)  # Create a client with custom timeout client <- mw_rest_client(timeout = 60) } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/mwbenchr.html","id":null,"dir":"Reference","previous_headings":"","what":"mwbenchr: R Interface for Direct Access to Metabolomics Workbench REST API — mwbenchr","title":"mwbenchr: R Interface for Direct Access to Metabolomics Workbench REST API — mwbenchr","text":"mwbenchr package enables programmatic retrieval processing metabolomics data Metabolomics Workbench REST API (v1.2). provides access study metadata, compound information, RefMet standardized metabolite names, metabolomics statistics (MetStat), gene protein data, pathway mappings (moverz), facilitating reproducible workflows data integration metabolomics research.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/mwbenchr.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main Functions","title":"mwbenchr: R Interface for Direct Access to Metabolomics Workbench REST API — mwbenchr","text":"mw_rest_client Initialize REST client get_study_summary Get study information get_compound_by_regno Get compound data search_metstat Search studies criteria get_refmet_by_name Get RefMet standardized names","code":""},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/reference/mwbenchr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mwbenchr: R Interface for Direct Access to Metabolomics Workbench REST API — mwbenchr","text":"Maintainer: Dany Mukesha danymukesha@gmail.com (ORCID)","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/parse_mw_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a tab-delimited string into a data frame — parse_mw_output","title":"Parse a tab-delimited string into a data frame — parse_mw_output","text":"function parses tab-delimited string containing chemical data converts data frame. string contains columns \"Input m/z\", \"Matched m/z\", \"Delta\", \"Name\", \"Systematic name\", \"Formula\", \"Ion\", \"Category\", \"Main class\", \"Sub class\".","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/parse_mw_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a tab-delimited string into a data frame — parse_mw_output","text":"","code":"parse_mw_output(result)"},{"path":"https://danymukesha.github.io/mwbenchr/reference/parse_mw_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a tab-delimited string into a data frame — parse_mw_output","text":"result character string, typically output mw_request() function returns tab-delimited string.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/parse_mw_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a tab-delimited string into a data frame — parse_mw_output","text":"data frame row represents set chemical data parsed input string. columns include \"Input m/z\", \"Matched m/z\", \"Delta\", \"Name\", \"Systematic name\", \"Formula\", \"Ion\", \"Category\", \"Main class\", \"Sub class\".","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/parse_mw_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a tab-delimited string into a data frame — parse_mw_output","text":"","code":"result <- paste0(     \"Input m/z\\tMatched m/z\\tDelta\\tName\\tSystematic name\\tFormula\\t\",     \"Ion\\tCategory\\tMain class\\tSub class\\n\",     \"180.063\\t180.0634\\t.0004\\t1,3,4,5,6-Pentahydroxyhexan-2-One\\t\",     \"1,3,4,5,6-pentahydroxyhexan-2-one\\tC6H12O6\\tNeutral\\tOrganic oxygen \",     \"compounds\\tOrganooxygen compounds\\tCarbohydrates and carbohydrate \",     \"conjugates\" ) parsed_data <- parse_mw_output(result) print(parsed_data) #> # A tibble: 1 × 10 #>   `Input m/z` `Matched m/z` Delta Name  `Systematic name` Formula Ion   Category #>         <dbl>         <dbl> <dbl> <chr> <chr>             <chr>   <chr> <chr>    #> 1        180.          180.  4e-4 1,3,… 1,3,4,5,6-pentah… C6H12O6 Neut… Organic… #> # ℹ 2 more variables: `Main class` <chr>, `Sub class` <chr>"},{"path":"https://danymukesha.github.io/mwbenchr/reference/print.mw_rest_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for mw_rest_client objects — print.mw_rest_client","title":"Print method for mw_rest_client objects — print.mw_rest_client","text":"Displays summary Metabolomics Workbench REST client configuration, including base URL, caching status, timeout, cache directory enabled.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/print.mw_rest_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for mw_rest_client objects — print.mw_rest_client","text":"","code":"# S3 method for class 'mw_rest_client' print(x, ...)"},{"path":"https://danymukesha.github.io/mwbenchr/reference/print.mw_rest_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for mw_rest_client objects — print.mw_rest_client","text":"x object class mw_rest_client, returned mw_rest_client(). ... Additional arguments (currently unused).","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/print.mw_rest_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for mw_rest_client objects — print.mw_rest_client","text":"Invisibly returns mw_rest_client object passed input. primarily called side effect (printing).","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/print.mw_rest_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for mw_rest_client objects — print.mw_rest_client","text":"","code":"client <- mw_rest_client(cache = TRUE, timeout = 15) print(client) #> Metabolomics Workbench REST Client #>   Base URL: https://www.metabolomicsworkbench.org/rest  #>   Caching: Enabled  #>   Timeout: 15 seconds #>   Cache directory: /tmp/RtmpcUIEht"},{"path":"https://danymukesha.github.io/mwbenchr/reference/response_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Response to Data Frame — response_to_df","title":"Convert Response to Data Frame — response_to_df","text":"function converts complex list-based response (API source) tibble. handles different types list structures, including flat responses, search results (rows), metabolite entries DATA values.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/response_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Response to Data Frame — response_to_df","text":"","code":"response_to_df(response)"},{"path":"https://danymukesha.github.io/mwbenchr/reference/response_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Response to Data Frame — response_to_df","text":"response list can various forms: Flat named list (single record) Search results rows (e.g., Row1, Row2) Metabolite entries DATA elements (e.g., measurement data)","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/response_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Response to Data Frame — response_to_df","text":"tibble processed data, element converted column. DATA columns NULL, replaced NA.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/search_by_mass.html","id":null,"dir":"Reference","previous_headings":"","what":"Search compounds by mass — search_by_mass","title":"Search compounds by mass — search_by_mass","text":"Search compounds specified databases using mass--charge ratio, ion type, mass tolerance.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/search_by_mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search compounds by mass — search_by_mass","text":"","code":"search_by_mass(   client,   db,   mz,   ion_type,   tolerance,   format = \"application/json\" )"},{"path":"https://danymukesha.github.io/mwbenchr/reference/search_by_mass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search compounds by mass — search_by_mass","text":"client mw_rest_client object db Character. Database search (\"MB\", \"LIPIDS\", \"REFMET\") mz Numeric. Mass--charge ratio ion_type Character. Ion type (e.g., \"M+H\", \"M-H\", \"M+Na\") tolerance Numeric. Mass tolerance Daltons format Character. Output format (\"json\" \"txt\")","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/search_by_mass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search compounds by mass — search_by_mass","text":"Tibble containing matching compounds(JSON) character string(txt)","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/search_by_mass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search compounds by mass — search_by_mass","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client()  # Search for compounds with specific m/z matches <- search_by_mass(client,     db = \"REFMET\",     mz = 180.063,     ion_type = \"M+H\",     tolerance = 0.01 )  # Search in lipids database lipid_matches <- search_by_mass(client,     db = \"LIPIDS\",     mz = 760.585,     ion_type = \"M+H\",     tolerance = 0.05 ) } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/search_metstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Search studies using MetStat criteria — search_metstat","title":"Search studies using MetStat criteria — search_metstat","text":"Search studies Metabolomics Workbench database using multiple criteria including analysis type, species, sample source, disease.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/search_metstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search studies using MetStat criteria — search_metstat","text":"","code":"search_metstat(   client,   analysis_type = \"\",   polarity = \"\",   chromatography = \"\",   species = \"\",   sample_source = \"\",   disease = \"\",   kegg_id = \"\",   refmet_name = \"\" )"},{"path":"https://danymukesha.github.io/mwbenchr/reference/search_metstat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search studies using MetStat criteria — search_metstat","text":"client mw_rest_client object analysis_type Character. Analysis type (e.g., \"LCMS\", \"GCMS\", \"NMR\") polarity Character. Ionization polarity (\"POSITIVE\", \"NEGATIVE\") chromatography Character. Chromatography method (e.g., \"HILIC\", \"RP\") species Character. Species name (e.g., \"Human\", \"Mouse\", \"Rat\") sample_source Character. Sample type (e.g., \"Blood\", \"Urine\", \"Tissue\") disease Character. Disease condition kegg_id Character. KEGG compound ID (e.g., \"C00002\") refmet_name Character. RefMet standardized metabolite name","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/search_metstat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search studies using MetStat criteria — search_metstat","text":"Tibble containing matching studies metadata","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/search_metstat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search studies using MetStat criteria — search_metstat","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client()  # Search for human blood LCMS studies studies <- search_metstat(client,     analysis_type = \"LCMS\",     species = \"Human\",     sample_source = \"Blood\" )  # Search for diabetes-related studies diabetes_studies <- search_metstat(client, disease = \"Diabetes\")  # Search for studies containing specific metabolite glucose_studies <- search_metstat(client, refmet_name = \"Glucose\")  #' # Search for human blood studies human_blood <- search_metstat(client,     species = \"Human\",     sample_source = \"Blood\" ) } # }"},{"path":"https://danymukesha.github.io/mwbenchr/reference/standardize_to_refmet.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize metabolite name to RefMet — standardize_to_refmet","title":"Standardize metabolite name to RefMet — standardize_to_refmet","text":"Convert metabolite name standardized RefMet equivalent. Useful name harmonization across datasets.","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/standardize_to_refmet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize metabolite name to RefMet — standardize_to_refmet","text":"","code":"standardize_to_refmet(client, name)"},{"path":"https://danymukesha.github.io/mwbenchr/reference/standardize_to_refmet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize metabolite name to RefMet — standardize_to_refmet","text":"client mw_rest_client object name Character. Metabolite name standardize","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/standardize_to_refmet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize metabolite name to RefMet — standardize_to_refmet","text":"Tibble containing standardized RefMet name","code":""},{"path":"https://danymukesha.github.io/mwbenchr/reference/standardize_to_refmet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize metabolite name to RefMet — standardize_to_refmet","text":"","code":"if (FALSE) { # \\dontrun{ client <- mw_rest_client()  # Standardize a metabolite name standardized <- standardize_to_refmet(client, \"glucose\") print(standardized$refmet_name) } # }"},{"path":[]},{"path":[]},{"path":"https://danymukesha.github.io/mwbenchr/news/index.html","id":"initial-release-0-0-1","dir":"Changelog","previous_headings":"New Features","what":"Initial Release","title":"mwbenchr 0.0.1","text":"Client Management: Implemented REST client configurable caching, timeouts, error handling Study Access: Complete suite functions accessing study data, metadata, experimental factors Compound Information: Retrieve detailed compound data using registry numbers, PubChem CIDs, classifications RefMet Integration: Full support RefMet standardized metabolite nomenclature Mass Spectrometry Tools: Search compounds accurate mass calculate exact masses lipids Advanced Search: MetStat integration multi-criteria study searches Data Processing: Intelligent response parsing support different API response formats","code":""},{"path":"https://danymukesha.github.io/mwbenchr/news/index.html","id":"core-functions-0-0-1","dir":"Changelog","previous_headings":"New Features","what":"Core Functions","title":"mwbenchr 0.0.1","text":"mw_rest_client(): Initialize API client configuration options get_study_summary(), get_study_factors(), get_study_metabolites(), get_study_data(): Study data access get_compound_by_regno(), get_compound_by_pubchem_cid(), get_compound_classification(): Compound information get_refmet_by_name(), standardize_to_refmet(), get_all_refmet_names(): RefMet integration search_metstat(): Multi-criteria study search search_by_mass(), calculate_exact_mass(): Mass spectrometry tools response_to_df(), flatten_entry(): Data processing utilities","code":""},{"path":"https://danymukesha.github.io/mwbenchr/news/index.html","id":"package-infrastructure-0-0-1","dir":"Changelog","previous_headings":"New Features","what":"Package Infrastructure","title":"mwbenchr 0.0.1","text":"Documentation: Detailed function documentation examples Vignette: Complete tutorial real-world workflows Testing: Full test suite >90% code coverage Bioconductor: Compliant Bioconductor standards guidelines Error Handling: Robust error messages automatic retry logic Performance: Built-caching rate limiting support","code":""},{"path":"https://danymukesha.github.io/mwbenchr/news/index.html","id":"technical-details-0-0-1","dir":"Changelog","previous_headings":"","what":"Technical Details","title":"mwbenchr 0.0.1","text":"Dependencies: R packages (httr2, tibble, dplyr, purrr) Compatibility: R >= 4.3.0, major platforms API Version: Metabolomics Workbench REST API v1.2 Data Format: Returns tidy data frames (tibbles) easy analysis","code":""}]
